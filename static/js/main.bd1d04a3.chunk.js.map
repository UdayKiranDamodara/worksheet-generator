{"version":3,"sources":["components/Problem.js","components/Answer.js","components/Layout.js","serviceWorker.js","index.js"],"names":["Problem","props","console","log","answer","useState","active","setActive","num1","Math","floor","random","num2","fixed","sign1","sign2","eval","className","type","placeholder","Answer","onClick","event","Layout","list","i","push","myNum","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wvBAIA,SAASA,QAAQC,OACbC,QAAQC,IAAIF,OACZ,IAAIG,OAAS,EAFM,UAISC,qDAAS,GAJlB,+MAIZC,OAJY,cAIJC,UAJI,cAMbC,KAAOC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GACzCC,KAAOH,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GACzCE,MAAQZ,MAAMY,MACdC,MAAQL,KAAKC,MAAuB,EAAhBD,KAAKE,UAAiB,IAAM,IAChDI,MAAQN,KAAKC,MAAuB,EAAhBD,KAAKE,UAAiB,IAAM,IAGtD,OAFAP,OAASY,KAAK,GAAD,OAAIR,KAAJ,YAAYM,MAAZ,YAAqBF,KAArB,YAA6BG,MAA7B,YAAsCF,MAAtC,MAGT,kEAAKI,UAAU,qBACX,qEAAKT,MACL,qEAAKM,MAAOF,MACZ,qEAAKG,MAAOF,OACZ,qEAAI,oEAAOK,KAAK,OAAOC,YAAY,YACnC,2DAAC,uCAAD,CAAQf,OAAQA,UAUbJ,+B,wDCfAoB,IAhBA,SAAC,GAAc,IAAbhB,EAAY,EAAZA,OAAY,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAOzB,OACI,yBAAKU,UAAU,mBAAmBI,QAAS,SAAAC,GAJ3Cf,GAAWD,KAOVA,EAASF,EAAS,iB,wLCGZmB,MAZf,SAAgBtB,GAEZ,IADA,IAAMuB,EAAO,GACJC,EAAE,EAAEA,EAAE,GAAGA,IACdD,EAAKE,KAAK,kBAAC1B,EAAA,EAAD,CAASa,MAAOZ,EAAM0B,SAEpC,OACI,yBAAKV,UAAU,QACVO,ICCOI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,CAAQP,MAAM,MACdQ,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.bd1d04a3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Answer from './Answer'\r\nimport './styles/Problem.css'\r\n\r\nfunction Problem(props){\r\n    console.log(props)\r\n    let answer = 0;\r\n\r\n    const [active, setActive] = useState(false)\r\n\r\n    const num1 = Math.floor((Math.random() * 10) + 1);\r\n    const num2 = Math.floor((Math.random() * 10) + 1);\r\n    const fixed = props.fixed;\r\n    const sign1 = Math.floor((Math.random() * 2)) ? '+' : '-';\r\n    const sign2 = Math.floor((Math.random() * 2)) ? '+' : '-';\r\n    answer = eval(`${num1} ${sign1} ${num2} ${sign2} ${fixed} `);\r\n\r\n    return(\r\n        <div className='problem-container'>\r\n            <h4>{num1}</h4>\r\n            <h4>{sign1}{num2}</h4>\r\n            <h4>{sign2}{fixed}</h4>\r\n            <h4><input type='text' placeholder='Answer' /></h4>\r\n            <Answer answer={answer}/>\r\n            {/* THIS WOULDN'T WORK AS CHANGING STATE HERE RELOADS THE COMPONENT AND HENCE CHANGES THE PROBLEM TOO\r\n            <div>\r\n                <button onClick={(event)=>setActive(!active)}>{(active)? 'Hide Answer' : 'Show answer'}</button>\r\n                <h4>{answer}</h4>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Problem","import React, { useState } from 'react'\r\n\r\nconst Answer = ({answer}) => {\r\n    const [active, setActive] = useState(false)\r\n\r\n    const handleCLick = () => {\r\n        setActive(!active)\r\n    }\r\n\r\n    return(\r\n        <div className='answer-container' onClick={event => handleCLick()}>\r\n        {/* <button className='answer-element' onClick={(event)=>setActive(!active)}>{(active)? 'Hide Answer' : 'Show answer'}</button>\r\n        <h4 className='answer-element'>{(active) ? answer : ''}</h4> */}\r\n        {active ? answer : 'Show Answer'}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer","import React from 'react';\r\nimport Problem from './Problem';\r\nimport './styles/Layout.css'\r\n\r\nfunction Layout(props) {\r\n    const list = []\r\n    for( var i=0;i<20;i++){\r\n        list.push(<Problem fixed={props.myNum} />);\r\n    }\r\n    return (\r\n        <div className='page'>\r\n            {list}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Layout;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport Layout from './components/Layout'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Layout myNum='8'/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}